;
; File generated by cc65 v 2.19 - Git 59c58ac
;
	.fopt		compiler,"cc65 v 2.19 - Git 59c58ac"
	.setcpu		"65C02"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.import		_bankflip
	.export		_draw_battle_screen
	.export		_init_battle
	.export		_draw_battle_screen_postqueue
	.export		_update_battle
	.import		_QueuePackedSprite
	.import		_QueueSpriteRect
	.import		_QueueFillRect
	.import		_printBCDnum
	.import		_print
	.import		_cursorX
	.import		_cursorY
	.import		_queue_flags_param
	.import		_rect
	.import		_FontFrames
	.import		_player_active_veggie
	.import		_encountered_veggie
	.import		_player_party
	.import		_veggie_templates
	.import		_veggie_names
	.import		_seed_inventory
	.import		_do_noise_effect
	.import		_EnemyFrames_VEGGIES
	.export		_menu_index
	.export		_menuMode
	.export		_textboxX
	.export		_textboxY
	.export		_textboxW
	.export		_textboxH
	.export		_messageBuf
	.export		_stateChangeTimer
	.export		_playerVeggieX
	.export		_wildVeggieX
	.export		_menuEntries
	.export		_currentPartyIndex
	.export		_battle_state
	.export		_next_battle_state
	.export		_checkLoseCondition
	.export		_setMenuRect
	.export		_renderMenuText
	.export		_set_msg

.segment	"DATA"

_stateChangeTimer:
	.byte	$00
_playerVeggieX:
	.byte	$00
_wildVeggieX:
	.byte	$00
_menuEntries:
	.byte	$00
_currentPartyIndex:
	.byte	$00

.segment	"RODATA"

S0059:
	.byte	$1B,$2B,$31,$02,$33,$25,$2A,$42,$02,$12,$25,$1F,$27,$21,$20,$02
	.byte	$31,$2C,$02,$2F,$21,$21,$20,$2F,$00
S005C:
	.byte	$19,$25,$2C,$21,$20,$02,$2B,$31,$30,$41,$41,$41,$00
S0057:
	.byte	$03,$28,$2E,$21,$1D,$20,$35,$02,$2B,$31,$30,$42,$00
S0056:
	.byte	$14,$1D,$2A,$02,$1D,$33,$1D,$35,$41,$41,$41,$00
S0058:
	.byte	$15,$21,$2A,$30,$02,$2B,$31,$30,$02,$00
S004B:
	.byte	$03,$30,$30,$1D,$1F,$27,$00
S0053:
	.byte	$08,$2B,$31,$2A,$20,$02,$00
S004D:
	.byte	$12,$1D,$2E,$30,$35,$00
S004C:
	.byte	$15,$27,$25,$28,$28,$00
S004E:
	.byte	$08,$28,$21,$21,$00
S004F:
	.byte	$43,$43,$43,$00
S0050	:=	S004F+0
S0051:
	.byte	$45,$00
S0052	:=	S0051+0

.segment	"BSS"

_menu_index:
	.res	1,$00
_menuMode:
	.res	1,$00
_textboxX:
	.res	1,$00
_textboxY:
	.res	1,$00
_textboxW:
	.res	1,$00
_textboxH:
	.res	1,$00
_messageBuf:
	.res	25,$00
_battle_state:
	.res	1,$00
_next_battle_state:
	.res	1,$00

; ---------------------------------------------------------------
; void __near__ draw_battle_screen (void)
; ---------------------------------------------------------------

.segment	"CODE2"

.proc	_draw_battle_screen: near

.segment	"CODE2"

	lda     #$10
	sta     _queue_flags_param
	stz     _rect
	stz     _rect+1
	lda     #$7F
	sta     _rect+2
	sta     _rect+3
	stz     _rect+4
	ina
	sta     _rect+5
	stz     _rect+6
	lda     _bankflip
	sta     _rect+7
	jsr     _QueueSpriteRect
	jsr     decsp7
	lda     #<(_EnemyFrames_VEGGIES)
	ldy     #$05
	sta     (sp),y
	iny
	lda     #>(_EnemyFrames_VEGGIES)
	sta     (sp),y
	lda     _playerVeggieX
	clc
	adc     #$20
	ldy     #$04
	sta     (sp),y
	lda     #$50
	dey
	sta     (sp),y
	lda     _player_active_veggie
	sec
	sbc     #$01
	dey
	sta     (sp),y
	lda     #$00
	dey
	sta     (sp),y
	lda     _bankflip
	ora     #$02
	sta     (sp)
	lda     #$00
	jsr     _QueuePackedSprite
	jsr     decsp7
	lda     #<(_EnemyFrames_VEGGIES)
	ldy     #$05
	sta     (sp),y
	iny
	lda     #>(_EnemyFrames_VEGGIES)
	sta     (sp),y
	lda     _wildVeggieX
	clc
	adc     #$60
	ldy     #$04
	sta     (sp),y
	lda     #$50
	dey
	sta     (sp),y
	lda     _encountered_veggie
	sec
	sbc     #$01
	dey
	sta     (sp),y
	lda     #$01
	dey
	sta     (sp),y
	lda     _bankflip
	ora     #$02
	sta     (sp)
	lda     #$00
	jsr     _QueuePackedSprite
	lda     _menuMode
	beq     L0006
	cmp     #$01
	beq     L0007
	jsr     decsp7
	lda     #<(_FontFrames)
	ldy     #$05
	sta     (sp),y
	iny
	lda     #>(_FontFrames)
	sta     (sp),y
	lda     #$0C
	ldy     #$04
	sta     (sp),y
	lda     _menu_index
	asl     a
	asl     a
	asl     a
	clc
	adc     #$0D
	dey
	sta     (sp),y
	lda     #$43
	dey
	sta     (sp),y
	lda     #$00
	dey
	sta     (sp),y
	lda     _bankflip
	sta     (sp)
	lda     #$80
	jsr     _QueuePackedSprite
L0007:	jsr     decsp4
	lda     _textboxX
	ldy     #$03
	sta     (sp),y
	lda     _textboxY
	dey
	sta     (sp),y
	lda     _textboxW
	dey
	sta     (sp),y
	lda     _textboxH
	sta     (sp)
	lda     #$D4
	jmp     _QueueFillRect
L0006:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ init_battle (unsigned char template_num)
; ---------------------------------------------------------------

.segment	"CODE2"

.proc	_init_battle: near

.segment	"CODE2"

	jsr     pusha
	stz     _menu_index
	lda     #<(_player_active_veggie)
	ldx     #>(_player_active_veggie)
	jsr     pushax
	lda     #<(_player_party)
	ldx     #>(_player_party)
	jsr     pushax
	ldx     #$00
	lda     #$14
	jsr     _memcpy
	stz     _currentPartyIndex
	lda     #<(_encountered_veggie)
	ldx     #>(_encountered_veggie)
	jsr     pushax
	ldy     #$02
	lda     (sp),y
	jsr     pusha0
	lda     #$14
	jsr     tosmula0
	clc
	adc     #<(_veggie_templates)
	tay
	txa
	adc     #>(_veggie_templates)
	tax
	tya
	jsr     pushax
	ldx     #$00
	lda     #$14
	jsr     _memcpy
	stz     _battle_state
	lda     #$01
	sta     _next_battle_state
	lda     #$B4
	sta     _stateChangeTimer
	lda     #$01
	jsr     _setMenuRect
	lda     #<(S0053)
	ldx     #>(S0053)
	jsr     pushax
	lda     #$00
	jsr     _set_msg
	ldx     #$00
	lda     _encountered_veggie
	asl     a
	bcc     L0003
	inx
	clc
L0003:	adc     #<(_veggie_names)
	sta     ptr1
	txa
	adc     #>(_veggie_names)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	lda     (ptr1)
	jsr     pushax
	lda     #$06
	jsr     _set_msg
	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; void __near__ draw_battle_screen_postqueue (void)
; ---------------------------------------------------------------

.segment	"CODE2"

.proc	_draw_battle_screen_postqueue: near

.segment	"CODE2"

	lda     #$14
	sta     _cursorX
	lda     #$60
	sta     _cursorY
	ldx     #$00
	lda     _player_active_veggie
	asl     a
	bcc     L0004
	inx
	clc
L0004:	adc     #<(_veggie_names)
	sta     ptr1
	txa
	adc     #>(_veggie_names)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	lda     (ptr1)
	jsr     _print
	lda     #$68
	sta     _cursorY
	lda     _player_active_veggie+2
	jsr     _printBCDnum
	lda     _cursorX
	sec
	sbc     #$04
	sta     _cursorX
	lda     #<(S0051)
	ldx     #>(S0051)
	jsr     _print
	lda     _cursorX
	sec
	sbc     #$0C
	sta     _cursorX
	lda     _player_active_veggie+1
	jsr     _printBCDnum
	lda     #$46
	sta     _cursorX
	lda     #$60
	sta     _cursorY
	ldx     #$00
	lda     _encountered_veggie
	asl     a
	bcc     L0005
	inx
	clc
L0005:	adc     #<(_veggie_names)
	sta     ptr1
	txa
	adc     #>(_veggie_names)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	lda     (ptr1)
	jsr     _print
	lda     #$68
	sta     _cursorY
	lda     _encountered_veggie+2
	jsr     _printBCDnum
	lda     _cursorX
	sec
	sbc     #$04
	sta     _cursorX
	lda     #<(S0052)
	ldx     #>(S0052)
	jsr     _print
	lda     _cursorX
	sec
	sbc     #$0C
	sta     _cursorX
	lda     _encountered_veggie+1
	jsr     _printBCDnum
	jmp     _renderMenuText

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ update_battle (int inputs, int last_inputs)
; ---------------------------------------------------------------

.segment	"CODE2"

.proc	_update_battle: near

.segment	"CODE2"

	jsr     pushax
	stz     M0001
	ldx     #$00
	lda     _battle_state
	cmp     #$01
	jne     L0041
	stz     _playerVeggieX
	stz     _wildVeggieX
	ldy     #$03
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	tay
	txa
	and     #$04
	tax
	tya
	and     #$04
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (sp),y
	tax
	lda     (sp)
	jsr     complax
	and     ptr1
	pha
	txa
	and     ptr1+1
	sta     tmp1
	pla
	ora     tmp1
	beq     L0003
	inc     _menu_index
L0003:	ldy     #$03
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	tay
	txa
	and     #$08
	tax
	tya
	and     #$08
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (sp),y
	tax
	lda     (sp)
	jsr     complax
	and     ptr1
	pha
	txa
	and     ptr1+1
	sta     tmp1
	pla
	ora     tmp1
	beq     L0004
	dec     _menu_index
L0004:	lda     _menu_index
	cmp     #$FF
	bne     L003C
	stz     _menu_index
L003C:	lda     _menu_index
	cmp     _menuEntries
	bcc     L0006
	lda     _menuEntries
	sec
	sbc     #$01
	sta     _menu_index
L0006:	iny
	lda     (sp),y
	and     #$10
	sta     ptr1
	lda     (sp)
	eor     #$FF
	and     ptr1
	pha
	pla
	jeq     L0015
	lda     _menuMode
	cmp     #$02
	jne     L003E
	lda     _menu_index
	beq     L000C
	cmp     #$01
	beq     L000D
	cmp     #$02
	beq     L000E
	cmp     #$03
	beq     L003D
	jmp     L0015
L000C:	sed
	lda     _encountered_veggie+1
	sec
	sbc     _player_active_veggie+3
	sta     _encountered_veggie+1
	cld
	jsr     decsp2
	lda     #$1E
	dey
	sta     (sp),y
	lda     #$40
	sta     (sp)
	lda     #$08
	jsr     _do_noise_effect
	lda     #$02
	sta     _battle_state
	lda     #$00
	jsr     _setMenuRect
	lda     #$1E
	sta     _stateChangeTimer
	jmp     L0015
L000D:	lda     #$04
	jsr     _setMenuRect
	jmp     L0015
L000E:	ina
	jsr     _setMenuRect
	jmp     L0015
L003D:	lda     _currentPartyIndex
	jsr     pusha0
	lda     #$14
	jsr     tosmula0
	clc
	adc     #<(_player_party)
	tay
	txa
	adc     #>(_player_party)
	tax
	tya
	jsr     pushax
	lda     #<(_player_active_veggie)
	ldx     #>(_player_active_veggie)
	jsr     pushax
	ldx     #$00
	lda     #$14
	jsr     _memcpy
	stz     _battle_state
	lda     #$04
	sta     _next_battle_state
	lda     #$B4
	sta     _stateChangeTimer
	lda     #$01
	jsr     _setMenuRect
	lda     #<(S0056)
	ldx     #>(S0056)
	jsr     pushax
	lda     #$00
	jmp     L0039
L003E:	lda     _menuMode
	cmp     #$03
	jne     L0015
	lda     _menu_index
	jsr     pusha0
	lda     #$14
	jsr     tosmula0
	sta     ptr1
	txa
	clc
	adc     #>(_player_party)
	sta     ptr1+1
	ldy     #<(_player_party)
	lda     (ptr1),y
	jeq     L0015
	lda     _menu_index
	cmp     _currentPartyIndex
	bne     L003F
	stz     _battle_state
	lda     #$01
	sta     _next_battle_state
	lda     #$B4
	sta     _stateChangeTimer
	lda     #$01
	jsr     _setMenuRect
	lda     #<(S0057)
	ldx     #>(S0057)
	jsr     pushax
	lda     #$00
	jmp     L0039
L003F:	lda     _currentPartyIndex
	jsr     pusha0
	lda     #$14
	jsr     tosmula0
	clc
	adc     #<(_player_party)
	tay
	txa
	adc     #>(_player_party)
	tax
	tya
	jsr     pushax
	lda     #<(_player_active_veggie)
	ldx     #>(_player_active_veggie)
	jsr     pushax
	ldx     #$00
	lda     #$14
	jsr     _memcpy
	lda     _menu_index
	sta     _currentPartyIndex
	lda     #<(_player_active_veggie)
	ldx     #>(_player_active_veggie)
	jsr     pushax
	lda     _currentPartyIndex
	jsr     pusha0
	lda     #$14
	jsr     tosmula0
	clc
	adc     #<(_player_party)
	tay
	txa
	adc     #>(_player_party)
	tax
	tya
	jsr     pushax
	ldx     #$00
	lda     #$14
	jsr     _memcpy
	stz     _battle_state
	lda     #$01
	sta     _next_battle_state
	lda     #$B4
	sta     _stateChangeTimer
	lda     #$01
	jsr     _setMenuRect
	lda     #<(S0058)
	ldx     #>(S0058)
	jsr     pushax
	lda     #$00
	jsr     _set_msg
	ldx     #$00
	lda     _player_active_veggie
	asl     a
	bcc     L003B
	inx
	clc
L003B:	adc     #<(_veggie_names)
	sta     ptr1
	txa
	adc     #>(_veggie_names)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	lda     (ptr1)
	jsr     pushax
	lda     #$09
L0039:	jsr     _set_msg
L0015:	ldy     #$03
	lda     (sp),y
	and     #$10
	sta     ptr1+1
	ldy     #$01
	lda     (sp),y
	tax
	lda     (sp)
	jsr     complax
	lda     #$00
	pha
	txa
	and     ptr1+1
	sta     tmp1
	pla
	ora     tmp1
	jeq     L0037
	ldx     #$00
	lda     _menuMode
	cmp     #$03
	bne     L0040
	lda     _player_active_veggie+1
	jeq     L0049
	lda     #$02
	jsr     _setMenuRect
	jmp     L0037
L0040:	lda     _menuMode
	cmp     #$02
	jeq     L0049
	lda     #$02
	jsr     _setMenuRect
	jmp     L0037
L0041:	lda     _battle_state
	bne     L0043
	dec     _stateChangeTimer
	beq     L0042
	ldy     #$02
	lda     (sp),y
	and     #$10
	sta     ptr1
	lda     (sp)
	eor     #$FF
	and     ptr1
	pha
	pla
	jeq     L0049
L0042:	lda     _next_battle_state
	sta     _battle_state
	cmp     #$01
	jne     L0049
	ina
	jsr     _setMenuRect
	jmp     L0037
L0043:	lda     _battle_state
	cmp     #$02
	jne     L0045
	stz     _wildVeggieX
	lda     _stateChangeTimer
	lsr     a
	lsr     a
	lsr     a
	sta     _playerVeggieX
	dec     _stateChangeTimer
	jne     L0049
	lda     _encountered_veggie+1
	bne     L0024
	lda     _currentPartyIndex
	jsr     pusha0
	lda     #$14
	jsr     tosmula0
	clc
	adc     #<(_player_party)
	tay
	txa
	adc     #>(_player_party)
	tax
	tya
	jsr     pushax
	lda     #<(_player_active_veggie)
	ldx     #>(_player_active_veggie)
	jsr     pushax
	ldx     #$00
	lda     #$14
	jsr     _memcpy
	stz     _battle_state
	lda     #$04
	sta     _next_battle_state
	lda     #$B4
	sta     _stateChangeTimer
	lda     #$01
	jsr     _setMenuRect
	lda     #<(S0059)
	ldx     #>(S0059)
	jsr     pushax
	lda     #$00
	jsr     _set_msg
	lda     #<(_seed_inventory)
	ldx     #>(_seed_inventory)
	clc
	adc     _encountered_veggie
	bcc     L0025
	inx
L0025:	sta     ptr1
	stx     ptr1+1
	ldy     _encountered_veggie
	ldx     #$00
	lda     _seed_inventory,y
	ina
	sta     (ptr1)
	jmp     L0049
L0024:	sed
	lda     _player_active_veggie+1
	sec
	sbc     #$01
	sta     _player_active_veggie+1
	cld
	lda     #$1E
	sta     _stateChangeTimer
	lda     #$03
	sta     _battle_state
	jsr     decsp2
	lda     #$1E
	ldy     #$01
	sta     (sp),y
	lda     #$40
	sta     (sp)
	lda     #$08
	jsr     _do_noise_effect
	jmp     L0037
L0045:	lda     _battle_state
	cmp     #$03
	bne     L0047
	stz     _playerVeggieX
	lda     #$FF
	jsr     pusha0
	lda     _stateChangeTimer
	lsr     a
	lsr     a
	lsr     a
	jsr     tossuba0
	sta     _wildVeggieX
	dec     _stateChangeTimer
	ldx     #$00
	lda     _stateChangeTimer
	bne     L0049
	lda     _player_active_veggie+1
	bne     L002E
	lda     _currentPartyIndex
	jsr     pusha0
	lda     #$14
	jsr     tosmula0
	clc
	adc     #<(_player_party)
	sta     ptr1
	txa
	adc     #>(_player_party)
	sta     ptr1+1
	lda     #$00
	sta     (ptr1)
L002E:	jsr     _checkLoseCondition
	tax
	beq     L0046
	stz     _battle_state
	lda     #$04
	sta     _next_battle_state
	lda     #$B4
	sta     _stateChangeTimer
	lda     #$01
	jsr     _setMenuRect
	lda     #<(S005C)
	ldx     #>(S005C)
	jsr     pushax
	lda     #$00
	jsr     _set_msg
	bra     L0037
L0046:	ina
	sta     _battle_state
	ina
	jsr     _setMenuRect
	bra     L0037
L0047:	lda     _battle_state
	cmp     #$04
	bne     L0049
	lda     _encountered_veggie+1
	bne     L0034
	ina
	bra     L003A
L0034:	jsr     _checkLoseCondition
	tax
	beq     L0048
	lda     #$03
	bra     L003A
L0048:	lda     #$02
L003A:	sta     M0001
L0037:	ldx     #$00
L0049:	lda     M0001
	jmp     incsp4

.segment	"BSS"

M0001:
	.res	1,$00

.endproc

; ---------------------------------------------------------------
; char __near__ checkLoseCondition (void)
; ---------------------------------------------------------------

.segment	"CODE2"

.proc	_checkLoseCondition: near

.segment	"CODE2"

	stz     M0001
	ldx     #$00
L0007:	lda     M0001
	cmp     #$05
	bcs     L0009
	jsr     pusha0
	lda     #$14
	jsr     tosmula0
	sta     ptr1
	txa
	clc
	adc     #>(_player_party)
	sta     ptr1+1
	ldy     #<(_player_party)
	ldx     #$00
	lda     (ptr1),y
	beq     L0008
	txa
	rts
L0008:	inc     M0001
	bra     L0007
L0009:	lda     #$01
	rts

.segment	"BSS"

M0001:
	.res	1,$00

.endproc

; ---------------------------------------------------------------
; void __near__ setMenuRect (char menuType)
; ---------------------------------------------------------------

.segment	"CODE2"

.proc	_setMenuRect: near

.segment	"CODE2"

	jsr     pusha
	lda     _menuMode
	cmp     (sp)
	beq     L0010
	stz     _menu_index
	lda     _menuMode
	cmp     #$03
	bne     L000E
	dea
	bra     L000D
L000E:	lda     _menuMode
	cmp     #$04
	bne     L0010
	lda     #$01
L000D:	sta     _menu_index
L0010:	lda     (sp)
	sta     _menuMode
	lda     (sp)
	cmp     #$01
	beq     L0014
	cmp     #$02
	beq     L0011
	cmp     #$03
	beq     L0012
	cmp     #$04
	beq     L0013
	bra     L0007
L0011:	lda     #$10
	sta     _textboxX
	lda     #$08
	sta     _textboxY
	lda     #$30
	sta     _textboxW
	lda     #$24
	sta     _textboxH
	lda     #$04
	bra     L0015
L0012:	lda     #$10
	sta     _textboxX
	lda     #$08
	sta     _textboxY
	lda     #$30
	sta     _textboxW
	lda     #$2D
	sta     _textboxH
	lda     #$05
	bra     L0015
L0013:	lda     #$10
	sta     _textboxX
	lda     #$08
	sta     _textboxY
	lda     #$30
	sta     _textboxW
	lda     #$12
	sta     _textboxH
	lda     #$02
	bra     L0015
L0014:	lda     #$10
	sta     _textboxX
	lda     #$08
	sta     _textboxY
	lda     #$6C
	sta     _textboxW
	lda     #$09
	sta     _textboxH
	lda     #$01
L0015:	sta     _menuEntries
L0007:	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; void __near__ renderMenuText (void)
; ---------------------------------------------------------------

.segment	"CODE2"

.proc	_renderMenuText: near

.segment	"CODE2"

	lda     _menuMode
	cmp     #$01
	jeq     L0014
	cmp     #$02
	beq     L0010
	cmp     #$03
	beq     L0011
	cmp     #$04
	jeq     L0013
	rts
L0010:	lda     #$15
	sta     _cursorX
	lda     #$0D
	sta     _cursorY
	lda     #<(S004B)
	ldx     #>(S004B)
	jsr     _print
	lda     #$15
	sta     _cursorX
	sta     _cursorY
	lda     #<(S004C)
	ldx     #>(S004C)
	jsr     _print
	lda     #$15
	sta     _cursorX
	lda     #$1D
	sta     _cursorY
	lda     #<(S004D)
	ldx     #>(S004D)
	jsr     _print
	lda     #$15
	sta     _cursorX
	lda     #$25
	sta     _cursorY
	lda     #<(S004E)
	ldx     #>(S004E)
	jmp     L000E
L0011:	lda     #$0D
	sta     _cursorY
	stz     M0001
L0012:	lda     M0001
	cmp     #$05
	bcs     L0003
	lda     #$15
	sta     _cursorX
	lda     M0001
	jsr     pusha0
	lda     #$14
	jsr     tosmula0
	sta     ptr1
	txa
	clc
	adc     #>(_player_party)
	sta     ptr1+1
	ldy     #<(_player_party)
	ldx     #$00
	lda     (ptr1),y
	asl     a
	bcc     L000F
	inx
	clc
L000F:	adc     #<(_veggie_names)
	sta     ptr1
	txa
	adc     #>(_veggie_names)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	lda     (ptr1)
	jsr     _print
	lda     #$08
	clc
	adc     _cursorY
	sta     _cursorY
	inc     M0001
	bra     L0012
L0013:	lda     #$15
	sta     _cursorX
	lda     #$0D
	sta     _cursorY
	lda     #<(S004F)
	ldx     #>(S004F)
	jsr     _print
	lda     #$15
	sta     _cursorX
	sta     _cursorY
	lda     #<(S0050)
	ldx     #>(S0050)
	bra     L000E
L0014:	lda     #$15
	sta     _cursorX
	lda     #$0D
	sta     _cursorY
	stz     _messageBuf+24
	lda     #<(_messageBuf)
	ldx     #>(_messageBuf)
L000E:	jmp     _print
L0003:	rts

.segment	"BSS"

M0001:
	.res	1,$00

.endproc

; ---------------------------------------------------------------
; void __near__ set_msg (char *newMsg, char i)
; ---------------------------------------------------------------

.segment	"CODE2"

.proc	_set_msg: near

.segment	"CODE2"

	jsr     pusha
	bra     L0004
L0002:	lda     #<(_messageBuf)
	ldx     #>(_messageBuf)
	clc
	adc     (sp)
	bcc     L0005
	inx
L0005:	sta     sreg
	stx     sreg+1
	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	lda     (ptr1)
	sta     (sreg)
	clc
	tya
	adc     (sp)
	sta     (sp)
	ldy     #$01
	clc
	tya
	adc     (sp),y
	sta     (sp),y
	iny
	lda     #$00
	adc     (sp),y
	sta     (sp),y
L0004:	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	lda     (ptr1)
	bne     L0002
	lda     (sp)
	tay
	lda     #$00
	sta     _messageBuf,y
	jmp     incsp3

.endproc

